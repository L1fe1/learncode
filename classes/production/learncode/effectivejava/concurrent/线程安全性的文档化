• JavaDoc并没有在它的输出中包含synchronized修饰符，因为在一个方法声明中出现synchronized修饰符，这个是实现细节，并不是导出API的一部分。
• 一个类为了可被多个线程安全地使用，必须在文档中清楚地说明它所支持的线程安全性级别。
  。不可变（immutable）——类的实例是不变的。
  。无条件的线程安全（unconditionally thread-safe）——类的实例是可变的，但是这个类有着足够的内部同步。Random和ConcurrentHashMap的实例可以并发使用，无需任何外部同步。
  。有条件的线程安全（conditional thread-safe）——除了有些方法为进行安全的并发使用而需要外部同步之外，这种线程安全级别与无条件的线程安全相同。
  。非线程安全（not thread-safe）——这个类的实例是可变的，为了并发地使用他们，客户必须利用自己选择的外部同步包围每个方法调用。包括通用的集合实现，例如ArrayList和HashMap。
  。线程队里的（thread-hostile）——这个类不能安全地被多个线程并发使用，即使所有的方法调用都被外部同步包围，线程对立的根源通常在于，没有同步地修改静态数据。
• 简而言之，每个类都应该利用字斟句酌的说明或者线程安全注解，清楚地在文档中说明他的线程安全属性。
