• 要区别设计良好的模块与设计不好的模块，最重要的因素在于，这个模块对于外部的其他模块而言，是否隐藏其内部数据和其他细节。
• 设计良好的模块会隐藏所有的实现细节，把他的API和他的实现清晰的分割开来。然后，模块之间通过他们之间的API进行通信，一个模块不需要知道其他模块的内部情况。
  这个概念被成为信息隐藏（information hiding）或封装（encapsulation），是软件设计的基本原则之一。
• 信息隐藏之所以非常重要有许多原因，其中大多数理由都源于这样一个事实：
  。他可以有效的解除系统组成各模块之间的耦合关系，使得这些模块可以独立的开发、测试、优化、使用、理解和修改。
  。这样可以加快系统开发的速度，因为这些模块可以并发开发。
  。他也减轻了维护的负担，因为程序员可以更快的理解这些模块，并且在调试他们的时候不影响其他的模块。
  。虽然信息隐藏本身无论是对内还是对外，都不会带来更好的性能，但是他可以有效的调节性能：一旦完成一个系统，并通过剖析哪些模块影响了系统性能，那些模块可以进一步优化，而不影响到其他模块的正确性。
  。信息隐藏提高了软件的可重用性，因为模块之间并不紧密相连，除了开发这些模块所使用的坏境之外，他们在其他坏境中往往也很有用。
  。最后，信息隐藏也降低了构建大型系统的风险，因为即使整个系统不可用，但是这些独立的模块却有可能是可用的。
• 实例域决不能是公有的。如果域是非final的，或者是一个指向可变对象的final引用，那么一旦使这个域成为公有的，就放弃了对存储在这个域中的值限制的能力。
  。包含公有可变域的类并不是线程安全的。
  。类具有公有的静态的final数组域，或者返回这个域的访问方法，这几乎总是错误的。
  。可以使公有数组变成私有的，并返回一个公有的不可变列表。
private static final Thing[] PRIVATE_VALUES = {...};
public static final List<Ting> VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));

//或者

private static final Thing[] PRIVATE_VALUES = {...};
public static final Thing[] values() {
     return PRIVATE_VALUES.clone;
}
