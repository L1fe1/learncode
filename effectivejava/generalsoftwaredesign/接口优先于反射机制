• 反射机制能够获得Constructor、Method、Field实例，并通过调用实例上的方法构造底层类的实例、调用底层类的方法、并访问底层类中的域。当然这样也需要付出代价。
  。丧失了编译时类型检查的好处。包括异常检查。
  。执行反射访问所需要的代码非常笨拙和冗长。
  。性能损失。反射方法调用比普通方法慢了许多。
• 通常，普通应用程序在运行时不应该以反射方式访问对象。
• 如果只是以非常有限的形式使用反射机制，虽然也要付出少许代价，但是可以获得许多好处。
• 如果你编写的程序必须要与编译时未知的类一起工作，如果有可能，就应该仅仅使用反射机制来实例化对象。